version: '3.8'

networks:
  microservices_network:
    driver: bridge

volumes:
  postgres_central_data:
  postgres_tenants_data:
  redis_data:

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt

services:
  # PostgreSQL Central (Para gestión de tenants)
  postgres-central:
    image: postgres:15-alpine
    container_name: postgres-central
    restart: unless-stopped
    networks:
      - microservices_network
    volumes:
      - postgres_central_data:/var/lib/postgresql/data
      - ./scripts/postgres-init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: central_management
      POSTGRES_USER: laravel_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U laravel_user -d central_management"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "5432:5432"

  # PostgreSQL para Tenants
  postgres-tenants:
    image: postgres:15-alpine
    container_name: postgres-tenants
    restart: unless-stopped
    networks:
      - microservices_network
    volumes:
      - postgres_tenants_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: laravel_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U laravel_user"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "5433:5432"

  # Redis para Cache y Sessions
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    networks:
      - microservices_network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass OZehmQFsGbBgU9hAA7jojlzpL
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "6379:6379"

  # Servicio Central de Gestión (con stancl/tenancy)
  central-management:
    build:
      context: ./services/central-management
      dockerfile: Dockerfile
    container_name: central-management
    restart: unless-stopped
    networks:
      - microservices_network
    volumes:
      - ./services/central-management:/var/www/html
      - ./shared:/var/www/shared
    depends_on:
      postgres-central:
        condition: service_healthy
      postgres-tenants:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      APP_ENV: local
      APP_DEBUG: "true"
      APP_KEY: base64:your_app_key_here_generate_with_artisan
      DB_CONNECTION: pgsql
      DB_HOST: postgres-central
      DB_PORT: 5432
      DB_DATABASE: central_management
      DB_USERNAME: laravel_user
      DB_PASSWORD_FILE: /run/secrets/postgres_password
      TENANCY_DB_HOST: postgres-tenants
      TENANCY_DB_PORT: 5432
      REDIS_HOST: redis
      REDIS_PASSWORD: OZehmQFsGbBgU9hAA7jojlzpL
      REDIS_PORT: 6379
      CACHE_DRIVER: redis
      SESSION_DRIVER: redis
      QUEUE_CONNECTION: redis
    secrets:
      - postgres_password
      - jwt_secret
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "8001:80"

  # Servicio de Autenticación
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    restart: unless-stopped
    networks:
      - microservices_network
    volumes:
      - ./services/auth-service:/var/www/html
      - ./shared:/var/www/shared
    depends_on:
      central-management:
        condition: service_healthy
    environment:
      APP_ENV: local
      APP_DEBUG: "true"
      APP_KEY: base64:your_app_key_here_generate_with_artisan
      CENTRAL_MANAGEMENT_URL: http://central-management
      REDIS_HOST: redis
      REDIS_PASSWORD: OZehmQFsGbBgU9hAA7jojlzpL
      REDIS_PORT: 6379
      CACHE_DRIVER: redis
      SESSION_DRIVER: redis
      JWT_SECRET_FILE: /run/secrets/jwt_secret
    secrets:
      - jwt_secret
      - postgres_password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "8002:80"

  # Servicio de Ventas
  sales-service:
    build:
      context: ./services/sales-service
      dockerfile: Dockerfile
    container_name: sales-service
    restart: unless-stopped
    networks:
      - microservices_network
    volumes:
      - ./services/sales-service:/var/www/html
      - ./shared:/var/www/shared
    depends_on:
      central-management:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    environment:
      APP_ENV: local
      APP_DEBUG: "true"
      APP_KEY: base64:your_app_key_here_generate_with_artisan
      CENTRAL_MANAGEMENT_URL: http://central-management
      AUTH_SERVICE_URL: http://auth-service
      REDIS_HOST: redis
      REDIS_PASSWORD: OZehmQFsGbBgU9hAA7jojlzpL
      REDIS_PORT: 6379
      CACHE_DRIVER: redis
      SESSION_DRIVER: redis
      QUEUE_CONNECTION: redis
    secrets:
      - postgres_password
      - jwt_secret
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "8003:80"

  # Servicio de Operaciones
  operations-service:
    build:
      context: ./services/operations-service
      dockerfile: Dockerfile
    container_name: operations-service
    restart: unless-stopped
    networks:
      - microservices_network
    volumes:
      - ./services/operations-service:/var/www/html
      - ./shared:/var/www/shared
    depends_on:
      central-management:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    environment:
      APP_ENV: local
      APP_DEBUG: "true"
      APP_KEY: base64:your_app_key_here_generate_with_artisan
      CENTRAL_MANAGEMENT_URL: http://central-management
      AUTH_SERVICE_URL: http://auth-service
      REDIS_HOST: redis
      REDIS_PASSWORD: OZehmQFsGbBgU9hAA7jojlzpL
      REDIS_PORT: 6379
      CACHE_DRIVER: redis
      SESSION_DRIVER: redis
      QUEUE_CONNECTION: redis
    secrets:
      - postgres_password
      - jwt_secret
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "8004:80"

  # Queue Worker para Jobs de Tenants
  queue-worker:
    build:
      context: ./services/central-management
      dockerfile: Dockerfile
    container_name: queue-worker
    restart: unless-stopped
    networks:
      - microservices_network
    volumes:
      - ./services/central-management:/var/www/html
      - ./shared:/var/www/shared
    depends_on:
      central-management:
        condition: service_healthy
    command: php artisan queue:work --queue=tenants,default --tries=3 --timeout=90
    environment:
      APP_ENV: local
      DB_CONNECTION: pgsql
      DB_HOST: postgres-central
      DB_PORT: 5432
      DB_DATABASE: central_management
      DB_USERNAME: laravel_user
      DB_PASSWORD_FILE: /run/secrets/postgres_password
      TENANCY_DB_HOST: postgres-tenants
      REDIS_HOST: redis
      REDIS_PASSWORD: OZehmQFsGbBgU9hAA7jojlzpL
      QUEUE_CONNECTION: redis
    secrets:
      - postgres_password
      - jwt_secret

  # API Gateway (Nginx)
  api-gateway:
    image: nginx:alpine
    container_name: api-gateway
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - microservices_network
    volumes:
      - ./nginx/api-gateway.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - central-management
      - auth-service
      - sales-service
      - operations-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mailhog para desarrollo (captura de emails)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    restart: unless-stopped
    networks:
      - microservices_network
    ports:
      - "1025:1025"
      - "8025:8025"

  # PhpMyAdmin (opcional para desarrollo)
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: phpmyadmin
    restart: unless-stopped
    networks:
      - microservices_network
    ports:
      - "8080:80"
    environment:
      PMA_ARBITRARY: 1
      PMA_HOST: postgres-central
      PMA_USER: laravel_user
      PMA_PASSWORD: yourpassword
    depends_on:
      - postgres-central
      - postgres-tenants
